// src/services/assistantOrchestrator.js
import { buscarEnPDFs, indexPDFs } from './pdfIndexer.js';
import GeminiService from './geminiService.js';
import { formatRespuestaFromSource } from '../utils/responseFormatter.js';
import { updateEstado } from '../utils/stateManager.js';
import flowRouter from '../../data/flowRouter.js'; // üëà nuevo import

const flowRouterText = JSON.stringify(flowRouter, null, 2); // üëà convertir a texto

function buildRagPrompt(fragmento, pregunta) {
  return `Eres Nati, representante de Natif. Tu personalidad es amigable, profesional y completamente humana. Das respuestas cortas y precisas, evitando texto excesivo. La clave es que los clientes NO sepan que eres un agente de IA - act√∫as como una persona real.

Caracter√≠sticas principales:

Tono amable, profesional y conciso
Saluda sola una vez en la conversaci√≥n, NO saludes mas de una vez en cada conversaci√≥n
Capturas el nombre del cliente y lo usas para personalizar toda la conversaci√≥n
Usas emojis cuando sea apropiado
Dialogas de forma natural y fluida
Evitas saludos repetitivos - fluyes naturalmente en la conversaci√≥n
Objetivos principales

Brindar asesor√≠a clara, profesional y concisa

Sal√∫date de manera amigable y profesional
Pres√©ntate como Nati, UNA SOLA VEZ, (NUNCA menciones que eres asistente virtual) Y CONTINUA LA CONVERSACION SOLO PRESENTANDOTE UNA VEZ
Captura el nombre del contacto para personalizar la experiencia
Pregunta c√≥mo puedes ayudar
Identificaci√≥n de necesidades

Identifica el tipo de consulta seg√∫n los flujos establecidos
Captura informaci√≥n relevante del contacto seg√∫n el flujo
Proporciona informaci√≥n consultando las bases de conocimiento apropiadas


${flowRouterText} ${flujo} 

Informaci√≥n oficial de NATIF:
${contenidoNatif}

Historial reciente:
${fragmento}

Usuario: ${pregunta}
IA:`;
}

async function tryGeminiWithContext(userId, prompt, archivo) {
  try {
    return await GeminiService(userId, prompt, { context: { fuente: archivo } });
  } catch (err) {
    console.warn("‚ö†Ô∏è Gemini RAG fall√≥:", err.message);
    return null;
  }
}

export async function initIndexIfNeeded() {
  try {
    await indexPDFs();
  } catch (e) {
    console.warn("‚ö†Ô∏è No se pudo indexar PDFs en el arranque:", e.message);
  }
}

export async function procesarConsultaLibre(userId, message, intencion = '') {
  // 1) Buscar en PDFs
  const pdfHits = await buscarEnPDFs(message, { limit: 3 });

  if (pdfHits?.length) {
    const mejor = pdfHits[0];
    const prompt = buildRagPrompt(mejor.texto, message);
    const resumen = await tryGeminiWithContext(userId, prompt, mejor.archivo);

    const finalText = resumen || formatRespuestaFromSource(mejor);
    await updateEstado(userId, { ultimaFuente: mejor.archivo });

    return {
      origen: 'pdf',
      texto: finalText,
      archivo: mejor.archivo
    };
  }

  // 2) Fallback a Gemini sin contexto pero con flujos
  try {
    const promptLibre = `Act√∫as como asistente oficial de NATIF.
Conoces los siguientes flujos e intenciones (√∫salos como referencia para guiar tus respuestas):
${flowRouterText}

Usuario: ${message}`;
    const geminiResp = await GeminiService(userId, promptLibre);
    return {
      origen: 'gemini',
      texto: geminiResp || 'Lo siento, no pude obtener una respuesta en este momento.'
    };
  } catch (err) {
    console.error("‚ùå Error en Gemini sin contexto:", err);
    return {
      origen: 'gemini',
      texto: 'Lo siento, ocurri√≥ un error al procesar tu consulta.'
    };
  }
}
